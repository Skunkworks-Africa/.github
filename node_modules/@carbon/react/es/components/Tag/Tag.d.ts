/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */
import PropTypes, { ReactNodeLike } from 'prop-types';
import React from 'react';
import { PolymorphicProps } from '../../types/common';
export declare const TYPES: {
    red: string;
    magenta: string;
    purple: string;
    blue: string;
    cyan: string;
    teal: string;
    green: string;
    gray: string;
    'cool-gray': string;
    'warm-gray': string;
    'high-contrast': string;
    outline: string;
};
export declare const SIZES: {
    sm: string;
    md: string;
    lg: string;
};
export interface TagBaseProps {
    /**
     * Provide content to be rendered inside of a `Tag`
     */
    children?: React.ReactNode;
    /**
     * Provide a custom className that is applied to the containing <span>
     */
    className?: string;
    /**
     * Specify if the `Tag` is disabled
     */
    disabled?: boolean;
    /**
     * @deprecated This property is deprecated and will be removed in the next major version. Use DismissibleTag instead.
     */
    filter?: boolean;
    /**
     * Specify the id for the tag.
     */
    id?: string;
    /**
     * @deprecated This property is deprecated and will be removed in the next major version. Use DismissibleTag instead.
     */
    onClose?: (event: React.MouseEvent<HTMLButtonElement>) => void;
    /**
     * Optional prop to render a custom icon.
     * Can be a React component class
     */
    renderIcon?: React.ElementType;
    /**
     * Specify the size of the Tag. Currently supports either `sm`,
     * `md` (default) or `lg` sizes.
     */
    size?: keyof typeof SIZES;
    /**
     * **Experimental:** Provide a `Slug` component to be rendered inside the `Tag` component
     */
    slug?: ReactNodeLike;
    /**
     * @deprecated This property is deprecated and will be removed in the next major version. Use DismissibleTag instead.
     */
    title?: string;
    /**
     * Specify the type of the `Tag`
     */
    type?: keyof typeof TYPES;
}
export type TagProps<T extends React.ElementType> = PolymorphicProps<T, TagBaseProps>;
declare const Tag: {
    <T extends React.ElementType<any>>({ children, className, id, type, filter, renderIcon: CustomIconElement, title, disabled, onClose, size, as: BaseComponent, slug, ...other }: TagProps<T>): import("react/jsx-runtime").JSX.Element;
    propTypes: {
        /**
         * Provide an alternative tag or component to use instead of the default
         * wrapping element
         */
        as: PropTypes.Requireable<PropTypes.ReactComponentLike>;
        /**
         * Provide content to be rendered inside of a `Tag`
         */
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Provide a custom className that is applied to the containing <span>
         */
        className: PropTypes.Requireable<string>;
        /**
         * Specify if the `Tag` is disabled
         */
        disabled: PropTypes.Requireable<boolean>;
        /**
         * Determine if `Tag` is a filter/chip
         */
        filter: (props: any, propName: any, componentName: any, ...rest: any[]) => any;
        /**
         * Specify the id for the tag.
         */
        id: PropTypes.Requireable<string>;
        /**
         * Click handler for filter tag close button.
         */
        onClose: (props: any, propName: any, componentName: any, ...rest: any[]) => any;
        /**
         * Optional prop to render a custom icon.
         * Can be a React component class
         */
        renderIcon: PropTypes.Requireable<object>;
        /**
         * Specify the size of the Tag. Currently supports either `sm`,
         * `md` (default) or `lg` sizes.
         */
        size: PropTypes.Requireable<string>;
        /**
         * **Experimental:** Provide a `Slug` component to be rendered inside the `Tag` component
         */
        slug: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        /**
         * Text to show on clear filters
         */
        title: (props: any, propName: any, componentName: any, ...rest: any[]) => any;
        /**
         * Specify the type of the `Tag`
         */
        type: PropTypes.Requireable<string>;
    };
};
export declare const types: string[];
export default Tag;
