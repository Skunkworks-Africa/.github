/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

import { extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import PropTypes from 'prop-types';
import React__default from 'react';
import cx from 'classnames';
import setupGetInstanceId from '../../tools/setupGetInstanceId.js';
import { usePrefix } from '../../internal/usePrefix.js';
import Tag, { SIZES, TYPES } from './Tag.js';
import { Close } from '@carbon/icons-react';

var _Close;
const getInstanceId = setupGetInstanceId();
const DismissibleTag = _ref => {
  let {
    children,
    className,
    disabled,
    id,
    renderIcon,
    title = 'Clear filter',
    onClose,
    slug,
    size,
    type,
    ...other
  } = _ref;
  const prefix = usePrefix();
  const tagId = id || `tag-${getInstanceId()}`;
  const tagClasses = cx(`${prefix}--tag--filter`, className);
  const handleClose = event => {
    if (onClose) {
      event.stopPropagation();
      onClose(event);
    }
  };
  let normalizedSlug;
  if (slug && slug['type']?.displayName === 'Slug') {
    normalizedSlug = /*#__PURE__*/React__default.cloneElement(slug, {
      size: 'sm',
      kind: 'inline'
    });
  }

  // Removing onClick from the spread operator
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const {
    onClick,
    ...otherProps
  } = other;
  return /*#__PURE__*/React__default.createElement(Tag, _extends({
    type: type,
    size: size,
    renderIcon: renderIcon,
    disabled: disabled,
    className: tagClasses,
    id: tagId
  }, otherProps), /*#__PURE__*/React__default.createElement("div", {
    className: `${prefix}--interactive--tag-children`
  }, children, normalizedSlug, /*#__PURE__*/React__default.createElement("button", {
    type: "button",
    className: `${prefix}--tag__close-icon`,
    onClick: handleClose,
    disabled: disabled,
    "aria-label": title,
    title: title
  }, _Close || (_Close = /*#__PURE__*/React__default.createElement(Close, null)))));
};
DismissibleTag.propTypes = {
  /**
   * Provide content to be rendered inside of a `DismissibleTag`
   */
  children: PropTypes.node,
  /**
   * Provide a custom className that is applied to the containing <span>
   */
  className: PropTypes.string,
  /**
   * Specify if the `DismissibleTag` is disabled
   */
  disabled: PropTypes.bool,
  /**
   * Specify the id for the tag.
   */
  id: PropTypes.string,
  /**
   * Click handler for filter tag close button.
   */
  onClose: PropTypes.func,
  /**
   * Optional prop to render a custom icon.
   * Can be a React component class
   */
  renderIcon: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
  /**
   * Specify the size of the Tag. Currently supports either `sm`,
   * `md` (default) or `lg` sizes.
   */
  size: PropTypes.oneOf(Object.keys(SIZES)),
  /**
   * **Experimental:** Provide a `Slug` component to be rendered inside the `DismissibleTag` component
   */
  slug: PropTypes.node,
  /**
   * Text to show on clear filters
   */
  title: PropTypes.string,
  /**
   * Specify the type of the `Tag`
   */
  type: PropTypes.oneOf(Object.keys(TYPES))
};

export { DismissibleTag as default };
